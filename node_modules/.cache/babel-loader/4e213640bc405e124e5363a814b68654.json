{"ast":null,"code":"var _jsxFileName = \"/Users/omkar/Desktop/Authentication/src/store/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: '',\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\nconst retrieveToken = () => {\n  const storedToken = localStorage.getItem('token');\n  const storedExpirationDate = localStorage.getItem('expirationTime');\n  const remainingTime = calculateTime(storedExpirationDate);\n\n  if (remainingTime <= 6000) {\n    localStorage.removeItem('token');\n    localStorage.getItem('expirationTime');\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    duration: remainingTime\n  };\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const tokenData = retrieveToken();\n  let initialToken;\n\n  if (tokenData) {\n    initialToken = tokenData.token;\n  }\n\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token;\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem('token');\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem('token', token);\n    localStorage.getItem('expirationTime', expirationTime);\n    const remainingTime = calculateTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      console.log(tokenData.duration);\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n    }\n  }, [tokenData]);\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthContextProvider, \"w4PGjzwU+znkNWWv/cmJxDZqQPE=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/omkar/Desktop/Authentication/src/store/AuthContext.js"],"names":["React","useState","useEffect","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","logout","calculateTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","retrieveToken","storedToken","localStorage","getItem","storedExpirationDate","remainingTime","removeItem","duration","AuthContextProvider","props","tokenData","initialToken","setToken","userIsLoggedIn","logoutHandler","clearTimeout","loginHandler","setItem","setTimeout","console","log","contextValue","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nlet logoutTimer;\n\nconst AuthContext = React.createContext({\n  token: '',\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nconst calculateTime = (expirationTime) => {\n    const currentTime = new Date().getTime();\n    const adjExpirationTime = new Date(expirationTime).getTime();\n    const remainingDuration = adjExpirationTime - currentTime;\n\n    return remainingDuration\n}\n\nconst retrieveToken = () => {\n    const storedToken = localStorage.getItem('token')\n    const storedExpirationDate = localStorage.getItem('expirationTime');\n\n    const remainingTime = calculateTime(storedExpirationDate);\n\n    if (remainingTime <= 6000) {\n        localStorage.removeItem('token');\n        localStorage.getItem('expirationTime');\n        return null;\n    }\n    return {\n        token: storedToken,\n        duration: remainingTime\n    }\n}\n\nexport const AuthContextProvider = (props) => {\n    const tokenData = retrieveToken();\n    let initialToken;\n     if (tokenData) {\n        initialToken = tokenData.token;\n     }\n   \n    const [token, setToken] = useState(initialToken);\n    \n    \n    const userIsLoggedIn = !!token;\n\n    const logoutHandler = () => {\n        setToken(null);\n        localStorage.removeItem('token');\n         if (logoutTimer) {\n             clearTimeout(logoutTimer);\n         }\n    };\n    \n    const loginHandler = (token, expirationTime) => {\n      setToken(token);\n      localStorage.setItem('token', token);\n      localStorage.getItem('expirationTime', expirationTime);\n      const remainingTime = calculateTime(expirationTime);\n      logoutTimer = setTimeout(logoutHandler, remainingTime);\n    }\n\n    useEffect(() => {\n        if (tokenData) {\n            console.log(tokenData.duration);\n            logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n        }\n    }, [tokenData])\n    \n    \n    \n    const contextValue = {\n        token: token,\n        isLoggedIn: userIsLoggedIn,\n        login: loginHandler,\n        logout: logoutHandler,\n    };\n    \n    return (\n        <AuthContext.Provider value={contextValue}>\n        {props.children}\n        </AuthContext.Provider>\n    );\n};\n\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}